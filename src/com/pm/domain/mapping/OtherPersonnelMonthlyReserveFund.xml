<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  


	<mapper namespace="OtherPersonnelMonthlyReserveFundMapping">


	<resultMap type="java.util.Map" id="map" />
	<resultMap type="com.pm.domain.business.PersonnelMonthlyReserveFund" id="personnelMonthlyReserveFundMap" />


	<select id="getPersonnelMonthlyReserveFund" parameterType="com.pm.domain.business.PersonnelMonthlyReserveFund" resultMap="personnelMonthlyReserveFundMap">
		
		select pmb.* ,dept.dept_name,dept.dept_no ,sc.staff_no,sc.staff_name,
		pmrf.old_insurance_grade_id,pmrf.old_securty_unit,pmrf.insurance_grade_id,pmrf.securty_unit,pmrf.description,
		ig.base_cardinal,ig.insurance_radix,
		ig.endowment_insurance_bypersonal,
		ig.medical_insurance_bypersonal,
		ig.losejob_insurance_bypersonal,
		ig.reservefund_bypersonal ,
		ig.endowment_insurance_bycompany ,
		ig.medical_insurance_bycompany,
		ig.losejob_insurance_bycompany ,
		ig.maternity_insurance_bycompany ,
		ig.jobharm_insurance_bycompany,
		ig.reservefund_bypcompany 
		from personnel_monthly_base pmb  
		inner join personnel_monthly_reservefund pmrf  
		on pmb.id = pmrf.id
		inner join tb_other_staff sc
		on pmb.staff_id = sc.staff_id 
		inner join tb_insurance_grade ig
		on pmrf.insurance_grade_id = ig.insurance_grade_id
		left JOIN ts_dept dept
		on pmb.dept_id = dept.dept_id
		where pmrf.id = #{id}		
	</select>

	<insert id="addPersonnelMonthlyReserveFund" parameterType="com.pm.domain.business.PersonnelMonthlyReserveFund" >
		insert into  personnel_monthly_reservefund(
			id,old_insurance_grade_id,old_securty_unit,
			insurance_grade_id,securty_unit,description
		)values  (
			#{id},#{old_insurance_grade_id},#{old_securty_unit},
			#{insurance_grade_id},#{securty_unit},#{description}
		)
	</insert>

	<update id="updatePersonnelMonthlyReserveFund" parameterType="com.pm.domain.business.PersonnelMonthlyReserveFund" >
		update  personnel_monthly_reservefund set 
		old_insurance_grade_id =#{old_insurance_grade_id},
		old_securty_unit = #{old_securty_unit},
		insurance_grade_id=#{insurance_grade_id},
		securty_unit=#{securty_unit},
		description=#{description}
		where id=#{id} 
	</update>

	<delete id="deletePersonnelMonthlyReserveFund" parameterType="com.pm.domain.business.PersonnelMonthlyReserveFund" >
		delete from  personnel_monthly_reservefund
		where id=#{id}
	</delete>

	<select id="queryPersonnelMonthlyReserveFundTotalAmount" parameterType="map"  resultType="double" >
		SELECT sum(amount) FROM (
			<include refid="personnelMonthlyReserveFundPagerSql"/>
		) c
	</select>

	<select id="queryPersonnelMonthlyReserveFundByPager_mysql" parameterType="map"  resultMap="personnelMonthlyReserveFundMap" >
		<include refid="personnelMonthlyReserveFundPagerSql"/> LIMIT #{page.startRow},#{page.pageSize}
	</select>

	<select id="queryPersonnelMonthlyReserveFundByCount_mysql" parameterType="map"  resultType="int" >
		SELECT COUNT(*) FROM (<include refid="personnelMonthlyReserveFundPagerSql"/> )c
	</select>

	<sql id="personnelMonthlyReserveFundPagerSql">	
		
		select pmb.* ,dept.dept_name,dept.dept_no ,sc.staff_no,sc.staff_name, aa.need_approve ,
		pmrf.old_insurance_grade_id,pmrf.old_securty_unit,pmrf.insurance_grade_id,pmrf.securty_unit,pmrf.description,
		ig.base_cardinal,ig.insurance_radix,
		ig.endowment_insurance_bypersonal,
		ig.medical_insurance_bypersonal,
		ig.losejob_insurance_bypersonal,
		ig.reservefund_bypersonal ,
		ig.endowment_insurance_bycompany ,
		ig.medical_insurance_bycompany,
		ig.losejob_insurance_bycompany ,
		ig.maternity_insurance_bycompany ,
		ig.jobharm_insurance_bycompany,
		ig.reservefund_bypcompany 
		from personnel_monthly_base pmb  
		inner join personnel_monthly_reservefund pmrf  
		on pmb.id = pmrf.id
		inner join tb_other_staff sc
		on pmb.staff_id = sc.staff_id
		left JOIN ts_dept dept
		on pmb.dept_id = dept.dept_id
		inner join tb_insurance_grade ig
		on pmrf.insurance_grade_id = ig.insurance_grade_id
		left join (SELECT need_approve,data_id FROM tb_apply_approve  where delete_flag='0' and need_approve='1' and data_type = 'OTHERPERSONNELMONTHLYBASE' group by data_id) aa
		on pmb.id = aa.data_id	
		WHERE 1=1 
		
		<if test="PersonnelMonthlyReserveFund.the_month != 0 ">
			<![CDATA[
			AND pmb.the_month = #{PersonnelMonthlyReserveFund.the_month} 
			]]>
		</if>
		
		<if test="PersonnelMonthlyReserveFund.staff_id != null and PersonnelMonthlyReserveFund.staff_id != ''">
			<![CDATA[
			AND pmb.staff_id = #{PersonnelMonthlyReserveFund.staff_id} 
			]]>
		</if>
		
		<if test="PersonnelMonthlyReserveFund.monthly_type != null and PersonnelMonthlyReserveFund.monthly_type != ''">
			<![CDATA[
			AND pmb.monthly_type = #{PersonnelMonthlyReserveFund.monthly_type} 
			]]>
		</if>
		
		
		<if test="PersonnelMonthlyReserveFund.verify_flag != null and PersonnelMonthlyReserveFund.verify_flag != ''">
			<if test="PersonnelMonthlyReserveFund.verify_flag == 1">
					and pmb.verify_userid is not null 
			</if>
			<if test="PersonnelMonthlyReserveFund.verify_flag == 0">			
					and pmb.verify_userid is null 
			</if>
		</if>		
		
		
		<include refid="OtherStaffAuthMapping.permission" />
		order by pmb.monthly_type, pmb.the_month,pmb.build_datetime , pmb.import_order 
		
		
	</sql>

</mapper>