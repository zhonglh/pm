<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  


	<mapper namespace="PayContractMapping">


	<resultMap type="java.util.Map" id="map" />
	<resultMap type="com.pm.domain.business.PayContract" id="payContractMap" />


	<select id="isNoExist" parameterType="com.pm.domain.business.PayContract" resultMap="payContractMap">
		select contract.* from tb_pay_contract contract where contract_no  = #{contract_no}
		<if test="id != null and id != ''">
			AND id != #{id}
		</if>
	</select>



	<select id="getPayContract" parameterType="com.pm.domain.business.PayContract" resultMap="payContractMap">
		select pc.* ,project.project_name,project.project_no ,otherstaff.staff_name as manager_username
		from tb_pay_contract pc
		INNER JOIN vb_project project 
		on pc.project_id = project.project_id
		left join tb_other_staff otherstaff
		on pc.manager_userid = otherstaff.staff_id
		where pc.id = #{id}
	</select>

	<insert id="addPayContract" parameterType="com.pm.domain.business.PayContract" >
		insert into  tb_pay_contract(
			id,contract_no,company_name,exec_contract,amount,
			signing_date,validity_date1,validity_date2,manager_userid,project_id,
			submit_date,client_linkman,email_phone,contract_number,paymen_mode,description,
			build_datetime,build_username,build_userid
		)values  (
			#{id},#{contract_no},#{company_name},#{exec_contract},#{amount},
			#{signing_date},#{validity_date1},#{validity_date2},#{manager_userid},#{project_id},
			#{submit_date},#{client_linkman},#{email_phone},#{contract_number},#{paymen_mode},#{description},
			#{build_datetime},#{build_username},#{build_userid}
		)
	</insert>

	<update id="updatePayContract" parameterType="com.pm.domain.business.PayContract" >
		update  tb_pay_contract set 
		contract_no=#{contract_no},
		company_name=#{company_name},
		exec_contract=#{exec_contract},
		amount=#{amount},
		signing_date=#{signing_date},
		validity_date1=#{validity_date1},
		validity_date2=#{validity_date2},
		manager_userid=#{manager_userid},
		project_id=#{project_id},
		submit_date=#{submit_date},
		client_linkman=#{client_linkman},
		email_phone=#{email_phone},
		contract_number=#{contract_number},
		paymen_mode=#{paymen_mode},
		description=#{description}
		where id=#{id}
	</update>


	<delete id="deletePayContract" parameterType="com.pm.domain.business.PayContract" >
		delete from  tb_pay_contract
		where id=#{id}
	</delete>

	<select id="queryPayContractTotalAmount" parameterType="map"  resultType="double" >
		SELECT sum( ifnull(amount,0) ) FROM (
			<include refid="payContractPagerSql"/>
		) c
	</select>

	<select id="queryPayContractByPager_mysql" parameterType="map"  resultMap="payContractMap" >
		<include refid="payContractPagerSql"/> LIMIT #{page.startRow},#{page.pageSize}
	</select>

	<select id="queryPayContractByCount_mysql" parameterType="map"  resultType="int" >
		SELECT COUNT(*) FROM (<include refid="payContractPagerSql"/> )c
	</select>

	<sql id="payContractPagerSql">
		<![CDATA[
		select pc.* ,project.project_name,project.project_no ,otherstaff.staff_name as manager_username,
		case WHEN
		validity_date2 is not null
		and date_add(validity_date2, interval -1 month) < now()
		and date_add(validity_date2, interval 1 day) > now()
		then 1 else 0 END as remind
		from tb_pay_contract pc  
		INNER JOIN vb_project project  
		on pc.project_id = project.project_id
		left join tb_other_staff otherstaff
		on pc.manager_userid = otherstaff.staff_id
		WHERE 1=1

		]]>


		<if test="PayContract.project_id != null and PayContract.project_id != ''">
			AND project.project_id = #{PayContract.project_id}
		</if>

		<if test="PayContract.project_name != null and PayContract.project_name != ''">
			AND project.project_name like concat('%',TRIM(#{PayContract.project_name}),'%')
		</if>

		<if test="PayContract.contract_no != null and PayContract.contract_no != ''">
			AND pc.contract_no like concat('%',TRIM(#{PayContract.contract_no}),'%')
		</if>



		<if test="PayContract.date1 != null ">
			<![CDATA[
				and pc.submit_date >= #{PayContract.date1}
			]]>
		</if>

		<if test="PayContract.date2 != null ">
			<![CDATA[
				and pc.submit_date <= #{PayContract.date2}
			]]>
		</if>
		
		<include refid="ProjectAuthMapping.permission" />


		order by pc.build_datetime desc
	</sql>

</mapper>